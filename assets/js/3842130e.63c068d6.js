"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[2737],{1851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var o=n(2043),r=n(4848),s=n(8453);const a={slug:"how-secure-cookies-can-pass-through-load-balancer",title:"How secure cookies can pass through load balancer",authors:"openpocket",tags:["OpenPocket"]},i=void 0,c={authorsImageUrls:[void 0]},h=[{value:"How secure cookies pass through load balancer ?",id:"how-secure-cookies-pass-through-load-balancer-",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"how-secure-cookies-pass-through-load-balancer-",children:"How secure cookies pass through load balancer ?"}),"\n",(0,r.jsx)(t.p,{children:"Open-pocket's authentication system relies on cookies, more specifically\nencrypted cookies (also called cookie-sessions). These cookie session\ncontain necessary information to identify and authenticate the user."}),"\n",(0,r.jsx)(t.p,{children:"Since, cookies are sent with requests by browser clients automatically,\nit makes for a seamless experience for users, in that they dont need to\nlog in again and again."}),"\n",(0,r.jsxs)(t.p,{children:["However, storing authentication information in a cookie is extremely\nrisky and can land you in heavy waters real quick if you don't know what\nyou are doing. Luckly, there are libraries that can do the heavylifting\nfor us. I used\n",(0,r.jsx)(t.a,{href:"https://github.com/fastify/fastify-secure-session",children:"fastify-secure-session"}),",\nto securely encrypted and decrypt the cookie on the fly.  It uses,\nbattle tested ",(0,r.jsx)(t.a,{href:"https://doc.libsodium.org/",children:"lib sodium"})," for\nencryption/decryption."]}),"\n",(0,r.jsx)(t.p,{children:"But even with this, I was not sure enough, so I added the following\nflags to my cookie:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"http only"}),": This will make your cookies inaccessible to browser\njavascript, so a malicious user cannot acesss the cookie even if he\nis able to inject javascript."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"secure: true"}),": This instructs the browser to only send the cookies\nover https protocol. Since, ",(0,r.jsx)(t.code,{children:"https"})," encrypts traffic, hence data in\ntransit is encrypted. This is extremely important when operating over\ninsecure networks (which is the case with the internet, you never\nknow you know)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"same site"}),": This settings instructs browser to only send cookies to\nmy website."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Looks good, but there's a big problem. As the application scales, it\nusually needs multiple computers (servers) to attend client requests.\nAnd since, we need multiple servers, we need a load balancer, that would\nintercept requests from public internet, forward it to an available\nmachine, and relays back the response to the client."}),"\n",(0,r.jsxs)(t.p,{children:["The problem is that load balancers usually perform something called SSL\ntermination. Which basically means changing the protocol from ",(0,r.jsx)(t.code,{children:"https"})," ->\n",(0,r.jsx)(t.code,{children:"http"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Now in theory, when the load balancer changes the protocol and tries to\nforward the cookie with ",(0,r.jsx)(t.code,{children:"secure=true"})," flag. The cookie will refuse to\ngo, and without it, the backend server would break."]}),"\n",(0,r.jsxs)(t.p,{children:["But it turns out that it is not the case usually, with the proper\nconfiguration, cookies marked with ",(0,r.jsx)(t.code,{children:"secure=true"})," can be successfully\ntransmitted and processed by your backend instances even when SSL is\nterminated at the load balancer.  How This Works"]}),"\n",(0,r.jsx)(t.p,{children:"The key is that the Secure flag is about the client's connection, not\nthe backend connection:"}),"\n",(0,r.jsx)(t.p,{children:"Browser to Load Balancer: The client's browser only sends the Secure\ncookie over HTTPS to your load balancer"}),"\n",(0,r.jsx)(t.p,{children:"Load Balancer to Backend: The load balancer terminates SSL, then\nforwards the request (including the cookie) to your backend over HTTP"}),"\n",(0,r.jsx)(t.p,{children:"Backend Processing: Your Fastify application, configured with\ntrustProxy: true, recognizes that the original request was secure (via\nthe X-Forwarded-Proto: https header) and properly handles the secure\ncookie"}),"\n",(0,r.jsx)(t.p,{children:"Visualizing the Flow"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Client (HTTPS) \u2192 Load Balancer (SSL termination) \u2192 Backend (HTTP)\n    \u2502                       \u2502                         \u2502\n    \u2502-- Secure cookie -----\x3e\u2502                         \u2502\n    \u2502                       \u2502-- Same cookie ---------\x3e\u2502\n    \u2502                       \u2502 (with X-Forwarded-Proto)\u2502\n    \u2502                       \u2502                         \u2502<- Fastify sees\n    \u2502                       \u2502                         \u2502   X-Forwarded-Proto: https\n    \u2502                       \u2502                         \u2502   and treats cookie as secure\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Why This Is Secure"}),"\n",(0,r.jsx)(t.p,{children:"The browser only transmits the cookie over HTTPS to your load balancer"}),"\n",(0,r.jsx)(t.p,{children:"The internal network between your load balancer and backend is typically trusted and secured"}),"\n",(0,r.jsx)(t.p,{children:"Your backend validates that the original request was secure using the X-Forwarded-Proto header"}),"\n",(0,r.jsx)(t.p,{children:"Step 1: The Client Makes a Secure Request"}),"\n",(0,r.jsxs)(t.p,{children:["The user's browser makes a request to ",(0,r.jsx)(t.a,{href:"https://yourapp.com",children:"https://yourapp.com"}),"."]}),"\n",(0,r.jsx)(t.p,{children:'Because the cookie is set with Secure=true, the browser\'s internal logic says: "Only attach this cookie to requests that use the https:// protocol."'}),"\n",(0,r.jsx)(t.p,{children:"The browser sends a request that includes the Cookie header to your load balancer over a secure HTTPS connection."}),"\n",(0,r.jsx)(t.p,{children:"Request Headers (to Load Balancer):\ntext"}),"\n",(0,r.jsx)(t.p,{children:"GET / HTTP/1.1\nHost: yourapp.com\nCookie: your_secure_session_cookie=encrypted_data_here\n...other headers..."}),"\n",(0,r.jsx)(t.p,{children:"Step 2: The Load Balancer Terminates SSL"}),"\n",(0,r.jsx)(t.p,{children:"The load balancer receives the encrypted HTTPS request."}),"\n",(0,r.jsx)(t.p,{children:"It performs SSL/TLS termination: it decrypts the request to inspect and process it (e.g., for routing, health checks, etc.)."}),"\n",(0,r.jsx)(t.p,{children:"Crucially, the decrypted HTTP request still contains the original Cookie header. The act of decryption does not remove it."}),"\n",(0,r.jsx)(t.p,{children:"Step 3: The Load Balancer Forwards the Request & Adds Metadata"}),"\n",(0,r.jsx)(t.p,{children:"The load balancer now needs to forward this decrypted HTTP request to one of your backend Fastify instances."}),"\n",(0,r.jsx)(t.p,{children:"Before sending it, the load balancer adds standard HTTP headers to inform the backend about the original nature of the client's request. The most important one is X-Forwarded-Proto."}),"\n",(0,r.jsx)(t.p,{children:"The load balancer forwards the complete, original HTTP request (including the Cookie header) and simply appends these new headers."}),"\n",(0,r.jsx)(t.p,{children:"Request Headers (from Load Balancer to Backend):\ntext"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"GET / HTTP/1.1\nHost: internal-backend-address\nCookie: your_secure_session_cookie=encrypted_data_here\nX-Forwarded-Proto: https   # <- The most important header\nX-Forwarded-For: 123.123.123.123 # <- The client's original IP\nX-Forwarded-Port: 443            # <- The original port\n...other headers...\n"})}),"\n",(0,r.jsx)(t.p,{children:"Note: The Cookie header is passed through completely unchanged. The backend instance receives it exactly as the browser sent it.\nStep 4: The Backend (Fastify) Interprets the Request"}),"\n",(0,r.jsx)(t.p,{children:'Your Fastify server receives the request from the load balancer. By default, it would see a plain HTTP request and think, "This is an insecure connection."'}),"\n",(0,r.jsx)(t.p,{children:"However, because you configured Fastify with trustProxy: true, it knows to look for the X-Forwarded-* headers to understand the true nature of the request."}),"\n",(0,r.jsx)(t.p,{children:'Fastify sees X-Forwarded-Proto: https and essentially says, "Ah, even though this connection to me is HTTP, the original request from the client was HTTPS. I will therefore treat this as if it were a secure HTTPS request."'}),"\n",(0,r.jsx)(t.p,{children:"Step 5: Fastify-Secure-Session Makes Its Decision"}),"\n",(0,r.jsx)(t.p,{children:"The fastify-secure-session plugin is asked to read the cookie."}),"\n",(0,r.jsx)(t.p,{children:"Because Fastify is now treating the request as secure (due to X-Forwarded-Proto), when the plugin checks request.secure or the protocol, it gets a true value."}),"\n",(0,r.jsx)(t.p,{children:"Since you configured it with secure: 'auto', it validates that the environment is \"secure\" and happily processes the Secure cookie. It would reject the cookie if X-Forwarded-Proto was http"}),"\n",(0,r.jsx)(t.p,{children:"this rule is enforced solely by the browser (the client). The load balancer is free to send the cookie over HTTP to your backend because it is not a browser and does not follow the same security rules.\nDetailed Breakdown"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Rule Enforcement: The Browser's Job"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:'The statement "a Secure=true cookie shall not be sent over HTTP" is a security policy enforced by the web browser (Chrome, Firefox, Safari, etc.).'}),"\n",(0,r.jsx)(t.p,{children:'How it works: When a website sets a cookie with the Secure attribute, the browser stores it and marks it as "only sendable over secure channels."'}),"\n",(0,r.jsx)(t.p,{children:"Before sending a request: The browser checks the protocol of the URL it's about to call."}),"\n",(0,r.jsx)(t.p,{children:"If the URL starts with https://, the browser attaches all relevant cookies, including those marked Secure."}),"\n",(0,r.jsx)(t.p,{children:"If the URL starts with http://, the browser will not attach any cookies marked Secure. This is the enforcement."}),"\n",(0,r.jsx)(t.p,{children:"This is a critical client-side security feature designed to prevent accidental leakage of sensitive cookies over unencrypted networks.\n2. The Load Balancer's Role: It's a Server, Not a Client"}),"\n",(0,r.jsx)(t.p,{children:"The load balancer operates completely differently. It is a server-side component that receives requests and forwards them."}),"\n",(0,r.jsx)(t.p,{children:"It receives the client's HTTPS request, which includes the Secure cookie (because the browser correctly sent it over HTTPS)."}),"\n",(0,r.jsx)(t.p,{children:"It terminates SSL, decrypting the request. The decrypted request now exists in memory on the load balancer as plain HTTP, but it still contains the original Cookie header with the secure cookie."}),"\n",(0,r.jsx)(t.p,{children:"It forwards this entire HTTP request (headers, body, and the Cookie header) to the backend server."}),"\n",(0,r.jsx)(t.p,{children:"The load balancer does not care about the Secure attribute. Its job is to faithfully forward the request it received. The Secure attribute is a instruction for the browser, not for intermediaries like load balancers.\nVisualization of the Flow"}),"\n",(0,r.jsx)(t.p,{children:"Why This is Still Secure"}),"\n",(0,r.jsx)(t.p,{children:"This architecture is considered secure because the trust boundary is between the client and the load balancer. The network between the load balancer and your backend instances is considered a trusted, private network (e.g., within a secure cloud VPC or data center). The security of that internal network is managed by you/your cloud provider, not by the public-facing rules of web browsers."}),"\n",(0,r.jsx)(t.p,{children:"The X-Forwarded-Proto header allows your backend to reconstruct the client's experience and apply logic (like cookie security) appropriately, even on the trusted internal network."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},2043:e=>{e.exports=JSON.parse('{"permalink":"/open-pocket-docs/blog/how-secure-cookies-can-pass-through-load-balancer","editUrl":"https://github.com/abdulrahim2002/open-pocket-backend-server/pulls/blog/securecookie.md","source":"@site/blog/securecookie.md","title":"How secure cookies can pass through load balancer","description":"How secure cookies pass through load balancer ?","date":"2025-09-08T18:15:22.000Z","tags":[{"inline":false,"label":"OpenPocket","permalink":"/open-pocket-docs/blog/tags/openpocket","description":"open pocket tag"}],"readingTime":6.96,"hasTruncateMarker":true,"authors":[{"name":"Open Pocket Team","title":"Open Pocket Team","page":null,"imageURL":"img/logo.png","key":"openpocket"}],"frontMatter":{"slug":"how-secure-cookies-can-pass-through-load-balancer","title":"How secure cookies can pass through load balancer","authors":"openpocket","tags":["OpenPocket"]},"unlisted":false,"nextItem":{"title":"Genesis","permalink":"/open-pocket-docs/blog/genesis"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);