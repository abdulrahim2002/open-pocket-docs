"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[9357],{3565:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"how-secure-cookies-can-pass-through-load-balancer","metadata":{"permalink":"/open-pocket-docs/blog/how-secure-cookies-can-pass-through-load-balancer","editUrl":"https://github.com/abdulrahim2002/open-pocket-backend-server/pulls/blog/securecookie.md","source":"@site/blog/securecookie.md","title":"How secure cookies can pass through load balancer","description":"How secure cookies pass through load balancer ?","date":"2025-09-08T18:15:22.000Z","tags":[{"inline":false,"label":"OpenPocket","permalink":"/open-pocket-docs/blog/tags/openpocket","description":"open pocket tag"}],"readingTime":6.96,"hasTruncateMarker":true,"authors":[{"name":"Open Pocket Team","title":"Open Pocket Team","page":null,"imageURL":"img/logo.png","key":"openpocket"}],"frontMatter":{"slug":"how-secure-cookies-can-pass-through-load-balancer","title":"How secure cookies can pass through load balancer","authors":"openpocket","tags":["OpenPocket"]},"unlisted":false,"nextItem":{"title":"Genesis","permalink":"/open-pocket-docs/blog/genesis"}},"content":"## How secure cookies pass through load balancer ?\\n\\nOpen-pocket\'s authentication system relies on cookies, more specifically\\nencrypted cookies (also called cookie-sessions). These cookie session\\ncontain necessary information to identify and authenticate the user. \\n\\nSince, cookies are sent with requests by browser clients automatically,\\nit makes for a seamless experience for users, in that they dont need to\\nlog in again and again.\\n\\n\x3c!-- truncate --\x3e\\n\\nHowever, storing authentication information in a cookie is extremely\\nrisky and can land you in heavy waters real quick if you don\'t know what\\nyou are doing. Luckly, there are libraries that can do the heavylifting\\nfor us. I used\\n[fastify-secure-session](https://github.com/fastify/fastify-secure-session),\\nto securely encrypted and decrypt the cookie on the fly.  It uses,\\nbattle tested [lib sodium](https://doc.libsodium.org/) for\\nencryption/decryption.\\n\\nBut even with this, I was not sure enough, so I added the following\\nflags to my cookie:\\n\\n1. `http only`: This will make your cookies inaccessible to browser\\n   javascript, so a malicious user cannot acesss the cookie even if he\\n   is able to inject javascript.\\n2. `secure: true`: This instructs the browser to only send the cookies\\n   over https protocol. Since, `https` encrypts traffic, hence data in\\n   transit is encrypted. This is extremely important when operating over\\n   insecure networks (which is the case with the internet, you never\\n   know you know).\\n3. `same site`: This settings instructs browser to only send cookies to\\n   my website.\\n\\n\\nLooks good, but there\'s a big problem. As the application scales, it\\nusually needs multiple computers (servers) to attend client requests.\\nAnd since, we need multiple servers, we need a load balancer, that would\\nintercept requests from public internet, forward it to an available\\nmachine, and relays back the response to the client.\\n\\nThe problem is that load balancers usually perform something called SSL\\ntermination. Which basically means changing the protocol from `https` ->\\n`http`.\\n\\nNow in theory, when the load balancer changes the protocol and tries to\\nforward the cookie with `secure=true` flag. The cookie will refuse to\\ngo, and without it, the backend server would break.  \\n\\n\\n\\nBut it turns out that it is not the case usually, with the proper\\nconfiguration, cookies marked with `secure=true` can be successfully\\ntransmitted and processed by your backend instances even when SSL is\\nterminated at the load balancer.  How This Works\\n\\n\\nThe key is that the Secure flag is about the client\'s connection, not\\nthe backend connection:\\n\\n    Browser to Load Balancer: The client\'s browser only sends the Secure\\ncookie over HTTPS to your load balancer\\n\\n    Load Balancer to Backend: The load balancer terminates SSL, then\\nforwards the request (including the cookie) to your backend over HTTP\\n\\n    Backend Processing: Your Fastify application, configured with\\ntrustProxy: true, recognizes that the original request was secure (via\\nthe X-Forwarded-Proto: https header) and properly handles the secure\\ncookie\\n\\nVisualizing the Flow\\n\\n```\\nClient (HTTPS) \u2192 Load Balancer (SSL termination) \u2192 Backend (HTTP)\\n    \u2502                       \u2502                         \u2502\\n    \u2502-- Secure cookie -----\x3e\u2502                         \u2502\\n    \u2502                       \u2502-- Same cookie ---------\x3e\u2502\\n    \u2502                       \u2502 (with X-Forwarded-Proto)\u2502\\n    \u2502                       \u2502                         \u2502<- Fastify sees\\n    \u2502                       \u2502                         \u2502   X-Forwarded-Proto: https\\n    \u2502                       \u2502                         \u2502   and treats cookie as secure\\n\\n```\\nWhy This Is Secure\\n\\n    The browser only transmits the cookie over HTTPS to your load balancer\\n\\n    The internal network between your load balancer and backend is typically trusted and secured\\n\\n    Your backend validates that the original request was secure using the X-Forwarded-Proto header\\n\\n\\n\\n\\n\\n\\n\\n\\nStep 1: The Client Makes a Secure Request\\n\\n    The user\'s browser makes a request to https://yourapp.com.\\n\\n    Because the cookie is set with Secure=true, the browser\'s internal logic says: \\"Only attach this cookie to requests that use the https:// protocol.\\"\\n\\n    The browser sends a request that includes the Cookie header to your load balancer over a secure HTTPS connection.\\n\\nRequest Headers (to Load Balancer):\\ntext\\n\\nGET / HTTP/1.1\\nHost: yourapp.com\\nCookie: your_secure_session_cookie=encrypted_data_here\\n...other headers...\\n\\nStep 2: The Load Balancer Terminates SSL\\n\\n    The load balancer receives the encrypted HTTPS request.\\n\\n    It performs SSL/TLS termination: it decrypts the request to inspect and process it (e.g., for routing, health checks, etc.).\\n\\n    Crucially, the decrypted HTTP request still contains the original Cookie header. The act of decryption does not remove it.\\n\\nStep 3: The Load Balancer Forwards the Request & Adds Metadata\\n\\n    The load balancer now needs to forward this decrypted HTTP request to one of your backend Fastify instances.\\n\\n    Before sending it, the load balancer adds standard HTTP headers to inform the backend about the original nature of the client\'s request. The most important one is X-Forwarded-Proto.\\n\\n    The load balancer forwards the complete, original HTTP request (including the Cookie header) and simply appends these new headers.\\n\\nRequest Headers (from Load Balancer to Backend):\\ntext\\n\\n```\\nGET / HTTP/1.1\\nHost: internal-backend-address\\nCookie: your_secure_session_cookie=encrypted_data_here\\nX-Forwarded-Proto: https   # <- The most important header\\nX-Forwarded-For: 123.123.123.123 # <- The client\'s original IP\\nX-Forwarded-Port: 443            # <- The original port\\n...other headers...\\n```\\n\\nNote: The Cookie header is passed through completely unchanged. The backend instance receives it exactly as the browser sent it.\\nStep 4: The Backend (Fastify) Interprets the Request\\n\\n    Your Fastify server receives the request from the load balancer. By default, it would see a plain HTTP request and think, \\"This is an insecure connection.\\"\\n\\n    However, because you configured Fastify with trustProxy: true, it knows to look for the X-Forwarded-* headers to understand the true nature of the request.\\n\\n    Fastify sees X-Forwarded-Proto: https and essentially says, \\"Ah, even though this connection to me is HTTP, the original request from the client was HTTPS. I will therefore treat this as if it were a secure HTTPS request.\\"\\n\\nStep 5: Fastify-Secure-Session Makes Its Decision\\n\\n    The fastify-secure-session plugin is asked to read the cookie.\\n\\n    Because Fastify is now treating the request as secure (due to X-Forwarded-Proto), when the plugin checks request.secure or the protocol, it gets a true value.\\n\\n    Since you configured it with secure: \'auto\', it validates that the environment is \\"secure\\" and happily processes the Secure cookie. It would reject the cookie if X-Forwarded-Proto was http\\n\\n\\n\\n\\nthis rule is enforced solely by the browser (the client). The load balancer is free to send the cookie over HTTP to your backend because it is not a browser and does not follow the same security rules.\\nDetailed Breakdown\\n1. Rule Enforcement: The Browser\'s Job\\n\\nThe statement \\"a Secure=true cookie shall not be sent over HTTP\\" is a security policy enforced by the web browser (Chrome, Firefox, Safari, etc.).\\n\\n    How it works: When a website sets a cookie with the Secure attribute, the browser stores it and marks it as \\"only sendable over secure channels.\\"\\n\\n    Before sending a request: The browser checks the protocol of the URL it\'s about to call.\\n\\n        If the URL starts with https://, the browser attaches all relevant cookies, including those marked Secure.\\n\\n        If the URL starts with http://, the browser will not attach any cookies marked Secure. This is the enforcement.\\n\\nThis is a critical client-side security feature designed to prevent accidental leakage of sensitive cookies over unencrypted networks.\\n2. The Load Balancer\'s Role: It\'s a Server, Not a Client\\n\\nThe load balancer operates completely differently. It is a server-side component that receives requests and forwards them.\\n\\n    It receives the client\'s HTTPS request, which includes the Secure cookie (because the browser correctly sent it over HTTPS).\\n\\n    It terminates SSL, decrypting the request. The decrypted request now exists in memory on the load balancer as plain HTTP, but it still contains the original Cookie header with the secure cookie.\\n\\n    It forwards this entire HTTP request (headers, body, and the Cookie header) to the backend server.\\n\\nThe load balancer does not care about the Secure attribute. Its job is to faithfully forward the request it received. The Secure attribute is a instruction for the browser, not for intermediaries like load balancers.\\nVisualization of the Flow\\n\\n\\n\\nWhy This is Still Secure\\n\\nThis architecture is considered secure because the trust boundary is between the client and the load balancer. The network between the load balancer and your backend instances is considered a trusted, private network (e.g., within a secure cloud VPC or data center). The security of that internal network is managed by you/your cloud provider, not by the public-facing rules of web browsers.\\n\\nThe X-Forwarded-Proto header allows your backend to reconstruct the client\'s experience and apply logic (like cookie security) appropriately, even on the trusted internal network."},{"id":"genesis","metadata":{"permalink":"/open-pocket-docs/blog/genesis","editUrl":"https://github.com/abdulrahim2002/open-pocket-backend-server/pulls/blog/August-2025-Genesis/index.md","source":"@site/blog/August-2025-Genesis/index.md","title":"Genesis","description":"Update: Pocket is shutting down on July 8, 2025","date":"2025-08-16T14:32:16.000Z","tags":[{"inline":false,"label":"OpenPocket","permalink":"/open-pocket-docs/blog/tags/openpocket","description":"open pocket tag"}],"readingTime":4.54,"hasTruncateMarker":true,"authors":[{"name":"Open Pocket Team","title":"Open Pocket Team","page":null,"imageURL":"img/logo.png","key":"openpocket"}],"frontMatter":{"slug":"genesis","title":"Genesis","authors":"openpocket","tags":["OpenPocket"]},"unlisted":false,"prevItem":{"title":"How secure cookies can pass through load balancer","permalink":"/open-pocket-docs/blog/how-secure-cookies-can-pass-through-load-balancer"}},"content":"## Update: Pocket is shutting down on July 8, 2025\\n\\n[Pocket is Saying Goodbye: What You Need to Know](https://support.mozilla.org/en-US/kb/future-of-pocket)\\n\\nThere is no mention if any other part of the codebase will be open-sourced.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Recent Discussions\\n\\n[Ask HN: What Pocket alternatives did you move to?](https://news.ycombinator.com/item?id=44597668)\\n\\n## Background\\n\\n[Pocket](https://en.wikipedia.org/wiki/Pocket_(service)), previously known as Read It Later, is an application and web service for managing a reading list of articles and videos from the Internet.\\n\\nIn February 2017, Mozilla [acquired Pocket](https://blog.mozilla.org/blog/2017/02/27/mozilla-acquires-pocket/) and stated that Pocket \\"will become part of the Mozilla open source project\\".\\n\\nA [ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=1343006) to open source the code was opened the same day, but closed in 2018.\\n\\nIt\'s now over six years since that promise, and although some code has been shared on https://github.com/Pocket, the majority remains closed, including the core server and client applications.\\n\\nThere have been [continued requests](https://discourse.mozilla.org/t/pocket-source-code/43686/7) for Mozilla to open source the code. The most recent public responses on this, from Pocket CEO [Matt Koidon](https://twitter.com/mkoidin?lang=en), were:\\n\\n* https://discourse.mozilla.org/t/pocket-source-code/43686/7 (June 2020)\\n* https://github.com/Pocket/extension-save-to-pocket/issues/75 (July 2020)\\n\\nThe issues raised are valid. Open-sourcing a previously private codebase has many challenges.\\n\\n## The Open Pocket Mission\\n\\nPocket is a great app and ecosystem, but its future success isn\'t guaranteed.\\n\\nIn 2020, Mozilla had [large lay-offs](https://arstechnica.com/information-technology/2020/08/firefox-maker-mozilla-lays-off-250-workers-says-covid-19-lowered-revenue/). Although these didn\'t appear to impact Pocket, it does raise questions about Mozilla\'s financial health.\\n\\nThe purpose of the Open Pocket organization is to gather those who are interested in building a \'[clean room](https://en.wikipedia.org/wiki/Clean_room_design)\' open-source implementation of Pocket comprising of:\\n* A web site replicating the behavior of https://getpocket.com/\\n* An API compatible with the current ([v3](https://getpocket.com/developer/docs/v3/retrieve)) Pocket API.\\n* Clients such as an iOS and Android app\\n\\n## How to Help\\n\\n* Star and Watch this repo to follow the latest updates.\\n* If you have thoughts on how to help build Open Pocket, create an [issue](https://github.com/open-pocket/open-pocket/issues) or [discussion topic](https://github.com/open-pocket/open-pocket/discussions) to help find others to work with.\\n* If you\'ve already started building something, consider joining forces with the Open Pocket organization.\\n\\n## Available Projects\\n\\nThe following projects have already been open-sourced. (This list excludes infrastructure projects, and those not updated in the past 5 years).\\n\\n* https://github.com/mozmeao/pocket-marketing-pages marketing pages for [getpocket.com](https://getpocket.com)\\n* https://github.com/Pocket/apollo-utils Utilities for Apollo gateway and implementing services\\n* https://github.com/Pocket/cloudwatch-metrics-aggregator nodejs lib to easily aggregate and process cloudwatch metrics in the background\\n* https://github.com/Pocket/curation-tools-frontend\\n* https://github.com/Pocket/extension-pocket-new-tab Pocket New Tab is a browser extension that serves as a replacement to the default new tab.\\n* https://github.com/Pocket/extension-save-to-pocket Save to Pocket is a browser extension that is used to save pages to a connected Pocket account\\n* https://github.com/Pocket/Firefox-Integration-Add-On-Prototype\\n* https://github.com/Pocket/front-end-build-tools Modified Create React App for use with Pocket extensions\\n* https://github.com/Pocket/pocket-ff-addon\\n* https://github.com/Pocket/proxy-server Service to deliver sponsored content while preserving privacy\\n* https://github.com/Pocket/recommendation-api Rank and serve recommendations\\n* https://github.com/Pocket/pocket-ios This appears to be the Pocket iOS app but there no is no README or description yet and it does not seem possible to build.\\n* https://github.com/Pocket/pocket-monorepo \\"This repo contains all the Pocket Typescript systems built as a monorepo but deployed as microservices.\\"\\n\\n## Legal\\n\\n* Any open source code should follow Pocket\'s [branding guidance](https://getpocket.com/developer/docs/branding).\\n* It is not yet known if Pocket/Mozilla hold any patents on Pocket behaviour.\\n* [Pocket is a registered trademark](https://news.ycombinator.com/item?id=9520668)\\n\\n## Background\\n\\nOpen Pocket was founded by [@andyw8](https://github.com/andyw8). I was a long-term fan of Pocket. and a Premium subscriber from 2014 to 2023.\\nMy favorite way to consume Pocket articles is with the Android app on a [Boyue Likebook](https://twitter.com/BoyueTechnology) e-reader.\\nI\'m also one of the maintainers of the [pocket-ruby](https://github.com/turadg/pocket-ruby) API client.\\nFor full transparency, I am also building a commercial product relating to Pocket (not yet released).\\n\\nUpdate (2024): I\'m no longer working on my own product since [Readwise Reader](https://readwise.io/read) is a very promising successor to Pocket.\\n\\n## Related and Similar Open Source Projects\\n\\n* https://github.com/omnivore-app/omnivore (Node)\\n  * The company [shut down after joining ElevenLabs](https://web.archive.org/web/20250428194155/https://blog.omnivore.app/p/details-on-omnivore-shutting-down) but the open source version is still active.\\n* https://github.com/wallabag/wallabag (PHP) (formerly known as Poche)\\n* https://github.com/ArchiveBox/ArchiveBox (Python)\\n* https://github.com/go-shiori/shiori (Go)\\n* ~https://github.com/burtonator/polar-bookshelf (last updated in 2021)~\\n* https://github.com/cleverdevil/indiepaper (Python) (last updated in 2018)\\n* https://github.com/zhy0216/OhMyPocket (Python) (last updated in 2016)\\n* https://github.com/kavinderd/icebox (Ruby) (last updated since 2015)\\n\\n## Related and Similar Commercial Products\\n\\n* [Readwise Reader](https://readwise.io/read) ([announcement blog post](https://blog.readwise.io/the-next-chapter-of-reader-public-beta/))"}]}}')}}]);