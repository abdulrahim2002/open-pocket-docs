"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1446],{6995:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Database-Layer/design","title":"Design","description":"Deciding the databse","source":"@site/docs/Database-Layer/design.md","sourceDirName":"Database-Layer","slug":"/Database-Layer/design","permalink":"/open-pocket-docs/docs/Database-Layer/design","draft":false,"unlisted":false,"editUrl":"https://github.com/abdulrahim2002/open-pocket-backend-server/tree/docs/docs/Database-Layer/design.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Design","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Database Layer","permalink":"/open-pocket-docs/docs/category/database-layer"},"next":{"title":"Database Schema","permalink":"/open-pocket-docs/docs/Database-Layer/database-schema"}}');var a=s(4848),i=s(8453);const r={title:"Design",sidebar_position:1},o=void 0,d={},l=[{value:"Deciding the databse",id:"deciding-the-databse",level:3},{value:"Setting up the database",id:"setting-up-the-database",level:3},{value:"ORM",id:"orm",level:3},{value:"Using Drizzle ORM for data manipulation",id:"using-drizzle-orm-for-data-manipulation",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"deciding-the-databse",children:"Deciding the databse"}),"\n",(0,a.jsxs)(n.p,{children:["Our core purpose is to store text based items generated by each user.  This is\nquite a simple task and I decided to use ",(0,a.jsx)(n.code,{children:"postgresql"})," database."]}),"\n",(0,a.jsxs)(n.p,{children:["When it comes to choosing database system, there are many exotic options out\nthere. In relational databases, we have MySql, Oracle etc. However,\n",(0,a.jsx)(n.code,{children:"postgresql"})," is quite mature and feature rich. And it's entirely open source\nwhich makes it an attractive option."]}),"\n",(0,a.jsx)(n.p,{children:"There are other databases like Cassandra, MongoDB that provide high\navailability and fault tolerance. However, the complexity of setting them up is\nnot worth it. And for our application, a simple SQL based database will do the\njob."}),"\n",(0,a.jsxs)(n.p,{children:["Thinking about scalability, I researched and found there there are many\nproducts in the market that claim to ",(0,a.jsx)(n.strong,{children:"scale relational databases"})," in the\ncloud.  Many of them provide compatibility with ",(0,a.jsx)(n.code,{children:"postgresql"})," like CocroachDB,\nYugabyte ect. So even if we need to scale later, then we can switch to these\nproducts."]}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-the-database",children:"Setting up the database"}),"\n",(0,a.jsx)(n.p,{children:"Making it easier for developers to set up the development environment is an\nimportant and difficult challenge. To accomplish this task, we use docker to\nsetup a postgres sql server on the machine."}),"\n",(0,a.jsxs)(n.p,{children:["We use binami's prepackaged container from docker hub, since it provides many\nuseful environment variables for controlling the behaviour of the ",(0,a.jsx)(n.code,{children:"postgres"}),"\nserver."]}),"\n",(0,a.jsx)(n.h3,{id:"orm",children:"ORM"}),"\n",(0,a.jsxs)(n.p,{children:["We are using ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/get-started-postgresql",children:"Drizzle\nORM"}),", since it provides a\nthin layer of  abstraction between database and developer. It does not hide the\ngenerated SQL queries, hence giving the developer a sense of control. You can\nalso switch to raw SQL, if you need even more control over the database layer."]}),"\n",(0,a.jsx)(n.p,{children:"On the other hand, it provides convinent methods for common CRUD operations on\nthe database. It also provides you the option to select the database driver."}),"\n",(0,a.jsx)(n.p,{children:"The 3 most common database driver options are:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://node-postgres.com/",children:"node-postgres"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/pg-native",children:"node-postgres + pg-native"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/porsager/postgres",children:"postgres.js"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In my experience, I found out that ",(0,a.jsx)(n.strong,{children:"node-postgres"})," is more stable and faster\nthan postgres.js, so for now, I will stick with node-postgres."]}),"\n",(0,a.jsx)(n.p,{children:"The documentation also states that it can perform 10% faster with pg-native\nextension (option 2), though I did not try it."}),"\n",(0,a.jsx)(n.h3,{id:"using-drizzle-orm-for-data-manipulation",children:"Using Drizzle ORM for data manipulation"}),"\n",(0,a.jsx)(n.p,{children:"Drizzle provides a convenient API for interacting with the database.  First of\nall, we need to initialize the driver."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { drizzle } from 'drizzle-orm/node-postgres';\n\nconst db = drizzle(process.env.DATABASE_URL);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can also use a Pool, which is considered a good practive for reasons\n",(0,a.jsx)(n.a,{href:"https://node-postgres.com/apis/pool",children:"specified here"}),". But most likely, it\ndefines a pool internally with simple drizzle() invocation as above."]}),"\n",(0,a.jsxs)(n.p,{children:["And now you are ready to run queries in the database. Please note that you need\nto define and apply schemas first. See ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/sql-schema-declaration#schemas",children:"how schema's are organized and\ndefined"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To find out, the possible column types in a schema, check\n",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/column-types/pg",children:"this"})," out."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Inserting data"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"insert"})," API."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescrip",children:"await db.insert(tableName).values(items);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also add multiple items, or make the callback return the inserted\nitems. See ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/insert#insert-returning",children:"docs"})]}),"\n",(0,a.jsxs)(n.p,{children:["If there's a conflict, for example you are trying to insert a duplicate value\nin a unique column, you can define the behaviour using: ",(0,a.jsx)(n.code,{children:"onConflictDoNothing"}),"\nor ",(0,a.jsx)(n.code,{children:"onConflictDoUpdate"})," API's. See\n",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/insert#on-conflict-do-nothing",children:"docs"})]}),"\n",(0,a.jsxs)(n.p,{children:["You can also use Common Table Expressions (CTE's) ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/insert#with-insert-clause",children:"if you\nwish"}),". But I feel,\nthese are better done with hands on raw sql, rather then their clumsy API."]}),"\n",(0,a.jsx)(n.p,{children:"Since, we are using typescript in this project. Drizzle provides us with handy\nAPI for getting the type of the data (aka model)."}),"\n",(0,a.jsx)(n.p,{children:"For example, you can define the type of the item to be inserted in a table as\nfollows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function addUser(user: typeof usersTable.$inferInsert) {\n    // insert the user in the users table\n}\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Selecting data (or reteriving data)"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Simple doing ",(0,a.jsx)(n.code,{children:"db.select()"})," will fetch all rows and columns of the table."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const res = await db.select().from(usersTable);\n"})}),"\n",(0,a.jsx)(n.p,{children:"The type information is automatically infered based on table schema."}),"\n",(0,a.jsx)(n.p,{children:"You can select a subset of columns like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const res = await db.select({\n    propertyOne users.id,\n    propertyTwo: users.name,\n}).from(usersTable);\n\nconst { propertyOne, propertyTwo } = res[0];\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"propertyOne"})," and ",(0,a.jsx)(n.code,{children:"properTwo"})," fields will automatically take values from\ncolumns ",(0,a.jsx)(n.code,{children:"users.id"})," and ",(0,a.jsx)(n.code,{children:"users.name"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can define arbitrary expressions ",(0,a.jsxs)(n.a,{href:"https://orm.drizzle.team/docs/select#partial-select",children:["in ",(0,a.jsx)(n.code,{children:"SELECT"}),"\nclause"]}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["It is possible to write complex queries in Drizzle ORM syntax, but I personally\nthink that it should be avoided.  Remember, you can always use the ",(0,a.jsxs)(n.a,{href:"https://orm.drizzle.team/docs/sql",children:[(0,a.jsx)(n.code,{children:"sql"}),"\nAPI"]})," to run raw SQL. Though, it takes away\nsome of the benefits like type coersion."]}),"\n",(0,a.jsxs)(n.p,{children:["Both offset based and cursor based pagination can be implemeneted. ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/select#advanced-pagination",children:"See\ndocs"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"A very simple method to get a subset of columns is this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await db.query.posts.findMany({\n  columns: {\n    title: true,\n  },\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You just define the columns you need in the ",(0,a.jsx)(n.code,{children:"columns"})," field and make them true.\nFor best support for a particular database, consider defining the ",(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/rqb#modes",children:"mode\noption"}),"."]}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Update"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.code,{children:"update()"})," API. This usually involves finding the records to update\nfirst, using some condition in where claus."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await db.update(usersTable)\n    .set({ name: 'new name' })\n    .where( eq( usersTable.name, 'old name' ) );\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/update",children:"See docs"})," for more details."]}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:"Delete"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["you can delete all rows in a table using ",(0,a.jsx)(n.code,{children:"delete()"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await db.delete(usersTable);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"returning()"})," to get the deleted rows, as we did with insertion."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://orm.drizzle.team/docs/delete",children:"See docs"})," for more detail."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);